package web

import (
	"github.com/Evalua-Tu-Profe/etp-api/cmd/web/components"
	"github.com/Evalua-Tu-Profe/etp-api"
	"fmt"
	"github.com/Evalua-Tu-Profe/etp-api/utils"
)

type HomeProps struct {
	IsAuthenticated        bool
	Schools                []*etp.School
	ProfessorCountBySchool map[int]int
	Ratings                []*etp.ProfessorRating
}

func getCommentBgColor(rating int) string {
	if rating >= 1 && rating < 3 {
		return "chat-bubble-error"
	} else if rating == 3 {
		return "chat-bubble-warning"
	}
	return "chat-bubble-success"
}

templ Home(props HomeProps) {
	@Base("Evalua Tu Profe") {
		@components.Navbar()
		@components.ContentContainer() {
			<h1 class="text-3xl mt-4">
				¡Bienvenido a Evalua Tu Profe!
			</h1>
			// Showing latest ratings
			<div class="flex justify-between items-end">
				<h2 class="text-3xl mt-4">
					¿Qué dicen los estudiantes?
				</h2>
			</div>
			<div class="divider"></div>
			<div class="flex flex-wrap gap-x-2">
				for _, rating:= range props.Ratings {
					<div class="flex-1 md:flex-initial">
						@components.CardWithShadow() {
							<div class="flex justify-between">
								<a href={ templ.SafeURL(fmt.Sprintf("/professor/%d", rating.ProfessorId)) }>
									<p class="text-l hover:underline">
										{ rating.Professor.FirstName }
										{ rating.Professor.LastName }
										<span class={ fmt.Sprintf("fi fi-%s", rating.School.Country.FlagCode) }></span>
									</p>
									<p class="text-sm">
										{ rating.School.Country.Name }
									</p>
								</a>
								<p class="text-sm text-right">
									{ utils.FormatTimeInSpanish(rating.CreatedAt.String(), "Jan 2, 2006") }
								</p>
							</div>
							// School name
							<p class="text-sm">
								{ rating.School.Name }
							</p>
							<p>
								{ rating.Course.Name }
							</p>
							// Adding hearts for rating
							<div class="flex gap-1">
								for range rating.Rating {
									<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6 text-red-500 fill-red-500">
										<path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z"></path>
									</svg>
								}
							</div>
							<div class="chat chat-start">
								<div class={ "chat-bubble " + getCommentBgColor(rating.Rating) }>
									{ rating.Comment }
								</div>
							</div>
						}
					</div>
				}
			</div>
			<div class="divider mt-6"></div>
			// Showing schools 
			<div class="flex justify-between items-end">
				<h2 class="text-3xl mt-4">
					Universidades
				</h2>
				<a href={ templ.SafeURL("/schools") } class="link link-primary">
					Ver todas las universidades
				</a>
			</div>
			<div class="divider"></div>
			<div class="flex flex-wrap gap-x-2">
				for _, school:= range props.Schools {
					<div class="flex-auto md:flex-initial">
						@components.CardWithShadow() {
							<a href={ templ.SafeURL(fmt.Sprintf("schools/%d", school.ID)) }>
								<p class="text-l hover:underline">
									{ school.Name }
									<span class={ fmt.Sprintf("fi fi-%s", school.Country.FlagCode) }></span>
								</p>
							</a>
							<p class="text-sm">
								{ school.Country.Name }
							</p>
							<p class="text-sm">
								{ fmt.Sprintf("%d", props.ProfessorCountBySchool[school.ID]) } Profesores
							</p>
						}
					</div>
				}
			</div>
		}
	}
}
