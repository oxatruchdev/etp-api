package components

import (
	"github.com/Evalua-Tu-Profe/etp-api"
	"fmt"
	"github.com/Evalua-Tu-Profe/etp-api/utils"
)

func getRatingBgColor(rating int) string {
	if rating >= 1 && rating < 3 {
		return "bg-error"
	} else if rating == 3 {
		return "bg-warning"
	}
	return "bg-success"
}

func getCommentBgColor(rating int) string {
	if rating >= 1 && rating < 3 {
		return "chat-bubble-error"
	} else if rating == 3 {
		return "chat-bubble-warning"
	}
	return "chat-bubble-success"
}

func getDifficultyBgColor(difficulty int) string {
	if difficulty >= 1 && difficulty < 3 {
		return "bg-success"
	} else if difficulty == 3 {
		return "bg-warning"
	}
	return "bg-error"
}

func iif[T any](b bool, i, e T) T {
	if b {
		return i
	}
	return e
}

templ RatingsList(ratings []*etp.ProfessorRating, count int) {
	<div id="professor-ratings-list" class="flex flex-col gap-4">
		for _, rating := range ratings {
			<div class="card lg:card-side shadow-lg">
				<div class="card-body">
					// Card header
					<div class="flex justify-between">
						<div class="flex flex-col">
							<p class="font-semibold">{ rating.Course.Name }</p>
							<p class="font-semibold">
								{ rating.Course.Code }
							</p>
						</div>
						<p class="flex justify-end">{ utils.FormatTimeInSpanish(rating.CreatedAt.String(), "January, 2 2006") }</p>
					</div>
					<p class="divider"></p>
					// Rating body
					<div class="flex flex-col gap-2">
						// Rating and difficulty
						<div class="flex gap-4">
							//Rating box
							<div class="div flex flex-col gap-1">
								<p class="text-l font-semibold">
									Puntuación
								</p>
								<div class={ "p-4 rounded " + getRatingBgColor(rating.Rating) }>
									<p class="text-center text-3xl font-semibold text-black">
										{ fmt.Sprintf("%d", rating.Rating) } / 5
									</p>
								</div>
							</div>
							// Difficulty Box
							<div class="div flex flex-col gap-1">
								<p class="text-l font-semibold">
									Dificultad
								</p>
								<div class={ "p-4 rounded " + getDifficultyBgColor(rating.Difficulty) }>
									<p class="text-center text-3xl font-semibold text-black">
										{ fmt.Sprintf("%d", rating.Difficulty) } / 5
									</p>
								</div>
							</div>
						</div>
						// Rest of the rating
						// WouldTakeAgain
						<p class="text-l mt-2">
							La tomaría otra vez: 
							<span class="font-semibold">
								{ iif(rating.WouldTakeAgain, "Sí", "No") }
							</span>
						</p>
						// TextbookRequired
						<p class="text-l">
							Se requiere libro: 
							<span class="font-semibold">
								{ iif(rating.TextbookRequired, "Sí", "No") }
							</span>
						</p>
						// MandatoryAssistance
						<p class="text-l">
							Asistencia requerida: 
							<span class="font-semibold">
								{ iif(rating.MandatoryAttendance, "Sí", "No") }
							</span>
						</p>
						// Grade
						<p class="text-l">
							Calificación obtenida: 
							<span class="font-semibold">
								{ rating.Grade }
							</span>
						</p>
						<div class="chat chat-start">
							<div class={ "chat-bubble " + getCommentBgColor(rating.Rating) }>
								{ rating.Comment }
							</div>
						</div>
						<div class="flex flex-col flex-wrap gap-y-2 md:flex-row mt-2">
							for _, tag := range rating.Tags {
								<div class="badge badge-outline h-auto badge-lg mt-2 md:mt-0 md:mr-4 max-w-80">
									{ tag.Name }
								</div>
							}
						</div>
					</div>
				</div>
			</div>
		}
	</div>
}
